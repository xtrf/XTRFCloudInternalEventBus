asyncapi: 2.0.0
info:
  title: Chat 2.0 Events
  version: docs version 1.0.0
defaultContentType: "application/json"
channels:
  tms-events:
    subscribe:
      summary: TMS Events
      message:
        oneOf:
          - $ref: "#/components/messages/project.Created"
          - $ref: "#/components/messages/project.Archived"
          - $ref: "#/components/messages/project.ManagerAssigned"
          - $ref: "#/components/messages/project.ManagerUnassigned"
          - $ref: "#/components/messages/project.BasicInfoUpdated"
          - $ref: "#/components/messages/project.StatusOpened"
          - $ref: "#/components/messages/project.StatusStarted"
          - $ref: "#/components/messages/project.StatusClosed"
          - $ref: "#/components/messages/project.StatusReopened"
          - $ref: "#/components/messages/project.StatusCanceled"

          - $ref: "#/components/messages/job.Created"
          - $ref: "#/components/messages/job.Archived"
          - $ref: "#/components/messages/job.VendorAssigned"
          - $ref: "#/components/messages/job.VendorUnassigned"
          - $ref: "#/components/messages/job.BasicInfoUpdated"
          - $ref: "#/components/messages/job.StatusOpened"
          - $ref: "#/components/messages/job.StatusStarted"
          - $ref: "#/components/messages/job.StatusClosed"
          - $ref: "#/components/messages/job.StatusReopened"
          - $ref: "#/components/messages/job.StatusCanceled"
          - $ref: "#/components/messages/job.EvaluationRated"
          - $ref: "#/components/messages/job.OfferRequested"
          - $ref: "#/components/messages/job.OfferResponseReceived"
          - $ref: "#/components/messages/job.OfferCanceled"

          - $ref: "#/components/messages/user.DeletedOrErased"

components:
  schemas:
    EventEnvelope:
      description: "Envelope shared between messages"
      type: object
      required:
        - eventName
        - eventId
        - timestamp
      properties:
        eventName:
          type: string
        eventId:
          type: string
        timestamp:
          type: string
          format: date-time
        workspaceId:
          type: string
          description: "Identifier of the workspace in the chat"
        workspaceName:
          type: string
          description: "Name of the workspace"
        revision:
          type: number
          description: "Event revision used for Event schema versioning and upcasting. Null means this is the first revision of the event"
        metadata:
          type: object
          description: "Other, client defined data"

    User:
      type: object
      required: [role, id]
      properties:
        role:
          $ref: "#/components/schemas/UserRole"
        id:
          type: string
          format: UUID

    UserRole:
      enum:
        - manager
        - vendor

    SpecificationType:
      enum:
        - CAT_GRID
        - SIMPLE
        - MT

    RateType:
      enum:
        - percent
        - fixed

    Response:
      enum:
        - accepted
        - rejected

  messages:

    project.Created:
      description: |
        * TMS should send it when: Project was created
        * XTRF sends it when: Project or Quote was created
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.created
              event:
                type: object
                required: [project]
                properties:
                  project:
                    type: object
                    required: [id, name, number, urls, services, dates, client]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                      number:
                        type: string
                      urls:
                        type: object
                        properties:
                          clientView:
                            type: string
                          managerView:
                            type: string
                      services:
                        type: array
                        items:
                          type: object
                          required: [serviceName, serviceSpecification]
                          properties:
                            serviceName:
                              type: string
                            serviceSpecification:
                              type: object
                              required: [sourceLanguage, targetLanguage, specialization]
                              properties:
                                sourceLanguage:
                                  type: string
                                  format: lang-ISO-code
                                targetLanguage:
                                  type: string
                                  format: lang-ISO-code
                                specialization:
                                  type: string
                                catToolName:
                                  type: string
                                mtEngineName:
                                  type: string
                      dates:
                        type: object
                        properties:
                          plannedStartDate:
                            type: string
                            format: date-time
                          plannedEndDate:
                            type: string
                            format: date-time
                      client:
                        type: object
                        required: [id, name, number, location]
                        properties:
                          id:
                            type: string
                            format: UUID
                          name:
                            type: string
                          number:
                            type: string
                          location:
                            type: object
                            required: [country, city]
                            properties:
                              country:
                                type: string
                              city:
                                type: string

    project.Archived:
      description: |
        * TMS should send it when: Project was archived, deactivated, removed or deleted
        * XTRF sends it when: Project was archived or deleted
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.archived
              event:
                type: object
                required: [projectId]
                properties:
                  projectId:
                    type: string
                    format: UUID

    project.ManagerAssigned:
      description: |
        * TMS should send it when: Project Manager was assigned to a Project
        * XTRF sends it when: Project Manager or Project Coordinator was assigned to a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.managerAssigned
              event:
                type: object
                required: [projectId, manager]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  manager:
                    type: object
                    required: [id, name, email, location]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string
                      location:
                        type: object
                        required: [country, city]
                        properties:
                          country:
                            type: string
                          city:
                            type: string

    project.ManagerUnassigned:
      description: |
        * TMS should send it when: Project Manager was unassigned from a Project
        * XTRF sends it when: Project Manager or Project Coordinator was unassigned from a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.managerUnassigned
              event:
                type: object
                required: [projectId, managerId]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  managerId:
                    type: string
                    format: UUID

    project.BasicInfoUpdated:
      description: |
        * TMS should send it when: Project basic info was updated
        * XTRF sends it when: Project name or number was updated
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.basicInfo.updated
              event:
                type: object
                required: [project]
                properties:
                  project:
                    type: object
                    required: [id]
                    description: "Only fields that have changed"
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                      number:
                        type: string
                      urls:
                        type: object
                        properties:
                          clientView:
                            type: string
                          managerView:
                            type: string
                      finance:
                        type: object
                        properties:
                          currency:
                            type: string
                            format: currency-ISO-code
                          summary:
                            type: object
                            required: [totalValue]
                            properties:
                              totalValue:
                                type: number
                              totalCost:
                                type: number
                      services:
                        type: array
                        items:
                          type: object
                          properties:
                            finance:
                              type: object
                              properties:
                                totalValue:
                                  type: number
                                calculationUnit:
                                  type: string
                                quantity:
                                  type: object
                                  properties:
                                    totalQuantity:
                                      type: number
                                    weighedQuantity:
                                      type: number
                            serviceName:
                              type: string
                            serviceSpecification:
                              type: object
                              properties:
                                sourceLanguage:
                                  type: string
                                  format: lang-ISO-code
                                targetLanguage:
                                  type: string
                                  format: lang-ISO-code
                                specialization:
                                  type: string
                                catToolName:
                                  type: string
                                mtEngineName:
                                  type: string
                      dates:
                        type: object
                        properties:
                          plannedStartDate:
                            type: string
                            format: date-time
                          plannedEndDate:
                            type: string
                            format: date-time
                      client:
                        type: object
                        properties:
                          id:
                            type: string
                            format: UUID
                          name:
                            type: string
                          number:
                            type: string
                          location:
                            type: object
                            properties:
                              country:
                                type: string
                              city:
                                type: string

    project.StatusOpened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was opened
        * XTRF sends it when: Project status was changed to Opened, Quote status was changed to Pending or Sent, or Quote was converted into a Project
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.status.opened
              event:
                type: object
                required: [projectId, newStatus, previousStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  openedAt:
                    type: string
                    format: date-time

    project.StatusStarted:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was started
        * XTRF sends it when: Project status was changed to Started
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.status.started
              event:
                type: object
                required: [projectId, newStatus, previousStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  startedAt:
                    type: string
                    format: date-time

    project.StatusClosed:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was closed
        * XTRF sends it when: Project status was changed to Closed
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.status.closed
              event:
                type: object
                required: [projectId, newStatus, previousStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  closedAt:
                    type: string
                    format: date-time

    project.StatusReopened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was reopened
        * XTRF sends it when: Project status was changed to Reopened or Quote was unrejected (reopened)
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.status.reopened
              event:
                type: object
                required: [projectId, newStatus, previousStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  reopenedAt:
                    type: string
                    format: date-time

    project.StatusCanceled:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was calceled
        * XTRF sends it when: Project status was changed to Canceled or Quote status was changed to Rejected
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.project.status.canceled
              event:
                type: object
                required: [projectId, newStatus, previousStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  canceledAt:
                    type: string
                    format: date-time

    job.Created:
      description: |
        * TMS should send it when: Job was created
        * XTRF sends it when: Job was created (in Project or Quote)
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.created
              event:
                type: object
                required: [job]
                properties:
                  job:
                    type: object
                    required: [projectId, id, number, urls, services, dates]
                    properties:
                      projectId:
                        type: string
                        format: UUID
                      id:
                        type: string
                        format: UUID
                      number:
                        type: string
                      name:
                        type: string
                      urls:
                        type: object
                        properties:
                          clientView:
                            type: string
                          managerView:
                            type: string
                          vendorView:
                            type: string
                      services:
                        type: array
                        items:
                          type: object
                          required: [serviceName, serviceSpecification]
                          properties:
                            serviceName:
                              type: string
                            serviceSpecification:
                              type: object
                              required: [sourceLanguage, targetLanguage, specialization]
                              properties:
                                sourceLanguage:
                                  type: string
                                  format: lang-ISO-code
                                targetLanguage:
                                  type: string
                                  format: lang-ISO-code
                                specialization:
                                  type: string
                                catToolName:
                                  type: string
                                mtEngineName:
                                  type: string
                      dates:
                        type: object
                        properties:
                          plannedStartDate:
                            type: string
                            format: date-time
                          plannedEndDate:
                            type: string
                            format: date-time

    job.Archived:
      description: |
        * TMS should send it when: Job was archived, deactivated, removed or deleted. Should be sent if the job was archived as a consequence of archiving a project.
        * XTRF sends it when: Job was archived or deleted
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.archived
              event:
                type: object
                required: [jobId]
                properties:
                  jobId:
                    type: string
                    format: UUID

    job.VendorAssigned:
      description: |
        * TMS should send it when: Vendor was assigned to a Job in a Project
        * XTRF sends it when: Vendor Contact Person was assigned to a Job in a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.vendorAssigned
              event:
                type: object
                required: [jobId, vendor]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  vendor:
                    type: object
                    required: [id, name, email, location, rates]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string
                      companyName:
                        type: string
                      location:
                        type: object
                        required: [country, city]
                        properties:
                          country:
                            type: string
                          city:
                            type: string
                      rates:
                        type: array
                        items:
                          type: object
                          required: [rate, currency, calculationUnit, service]
                          properties:
                            rate:
                              type: number
                            currency:
                              type: string
                              format: currency-ISO-code
                            calculationUnit: 
                              type: string
                            service:
                              type: object
                              required: [type, sourceLanguage, targetLanguage, specialization]
                              properties:
                                type:
                                  type: string
                                sourceLanguage:
                                  type: string
                                  format: lang-ISO-code
                                targetLanguage:
                                  type: string
                                  format: lang-ISO-code
                                specialization:
                                  type: string

    job.VendorUnassigned:
      description: |
        * TMS should send it when: Vendor was unassigned from a Job in a Project
        * XTRF sends it when: Vendor Contact Person was unassigned from a Job in a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.vendorUnassigned
              event:
                type: object
                required: [jobId, vendorId]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  vendorId:
                    type: string
                    format: UUID

    job.BasicInfoUpdated:
      description: |
        * TMS should send it when: Job basic info was updated
        * XTRF sends it when: Job type, number, languages or specializations were updated
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.basicInfo.updated
              event:
                type: object
                required: [job]
                properties:
                  job:
                    type: object
                    required: [id]
                    properties:
                      projectId:
                        type: string
                        format: UUID
                      id:
                        type: string
                        format: UUID
                      number:
                        type: string
                      name:
                        type: string
                      urls:
                        type: object
                        properties:
                          clientView:
                            type: string
                          managerView:
                            type: string
                          vendorView:
                            type: string
                      finance:
                        type: object
                        properties:
                          currency:
                            type: string
                            format: currency-ISO-code
                          summary:
                            type: object
                            required: [totalValue]
                            properties:
                              totalValue:
                                type: number
                      services:
                        type: array
                        items:
                          type: object
                          properties:
                            finance:
                              type: object
                              properties:
                                totalValue:
                                  type: number
                                calculationUnit:
                                  type: string
                                quantity:
                                  type: object
                                  properties:
                                    totalQuantity:
                                      type: number
                                    weighedQuantity:
                                      type: number
                            serviceName:
                              type: string
                            serviceSpecification:
                              type: object
                              properties:
                                sourceLanguage:
                                  type: string
                                  format: lang-ISO-code
                                targetLanguage:
                                  type: string
                                  format: lang-ISO-code
                                specialization:
                                  type: string
                                catToolName:
                                  type: string
                                mtEngineName:
                                  type: string
                      dates:
                        type: object
                        properties:
                          plannedStartDate:
                            type: string
                            format: date-time
                          plannedEndDate:
                            type: string
                            format: date-time

    job.StatusOpened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was opened
        * XTRF sends it when: Job status was changed to Opened, Requested or Assigned
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.status.opened
              event:
                type: object
                required: [jobId, newStatus, previousStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  openedAt:
                    type: string
                    format: date-time

    job.StatusStarted:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was started
        * XTRF sends it when: Job status was changed to Started
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.status.started
              event:
                type: object
                required: [jobId, newStatus, previousStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  startedAt:
                    type: string
                    format: date-time

    job.StatusClosed:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was closed
        * XTRF sends it when: Job status was changed to Ready
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.status.closed
              event:
                type: object
                required: [jobId, newStatus, previousStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  closedAt:
                    type: string
                    format: date-time

    job.StatusReopened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was reopened
        * XTRF sends it when: Job was reopened
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.status.reopened
              event:
                type: object
                required: [jobId, newStatus, previousStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  reopenedAt:
                    type: string
                    format: date-time

    job.StatusCanceled:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was canceled
        * XTRF sends it when: Job status was changed to Canceled
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.status.canceled
              event:
                type: object
                required: [jobId, newStatus, previousStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  canceledAt:
                    type: string
                    format: date-time

    job.EvaluationRated:
      description: |
        * TMS should send it when: A rating was added to a Job
        * XTRF sends it when: A rating was added to a Job
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.evaluation.rated
              event:
                type: object
                required: [jobId, rating]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  rating:
                    type: object
                    required: [id, addedTimestamp, author, url, properties]
                    properties:
                      id:
                        type: string
                        format: UUID
                      addedTimestamp:
                        type: string
                        format: date-time
                      author:
                        type: string
                      url:
                        type: string
                      properties:
                        type: object
                        description: Field to be defined/finished...
                        properties:
                          rating:
                            type: string
                          comment:
                            type: string

    job.OfferRequested:
      description: |
        * TMS should send it when: Job Offer was requested
        * XTRF sends it when: Job Offer was requested (sent) in Project or Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.offer.requested
              event:
                type: object
                required: [jobId, offer]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  offer:
                    type: object
                    description: To be defined...

    job.OfferCanceled:
      description:
        To be defined...

    job.OfferResponseReceived:
      description: |
        * TMS should send it when: Job Offer was accepted or rejected
        * XTRF sends it when: Job Offer was accepted or rejected via Job Offer page in Vendor Portal
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.job.offer.response.received
              event:
                type: object
                required: [jobId, offerId, response]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  offerId:
                    type: string
                    format: UUID
                  response:
                    $ref: "#/components/schemas/Response"

    user.DeletedOrErased:
      description: |
        * TMS should send it when: User was deleted, erased or deactivated in the TMS and has to be removed from the Workspace.
        * XTRF sends it when: HP User or Vendor Contact Person was deleted or erased
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, workspaceId, workspaceName, event]
            properties:
              eventName:
                const: tms.event.user.deletedOrErased
              event:
                type: object
                required: [user]
                properties:
                  user:
                    $ref: "#/components/schemas/User"