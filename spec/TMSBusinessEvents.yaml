asyncapi: 2.0.0
info:
  title: Chat 2.0 Events
  version: docs version 1.1.3
defaultContentType: "application/json"
channels:
  tms-events:
    subscribe:
      summary: TMS Events
      message:
        oneOf:
          - $ref: "#/components/messages/project.Created"
          - $ref: "#/components/messages/project.Archived"
          - $ref: "#/components/messages/project.ManagerAssigned"
          - $ref: "#/components/messages/project.ManagerUnassigned"
          - $ref: "#/components/messages/project.InfoUpdated"
          - $ref: "#/components/messages/project.StatusOpened"
          - $ref: "#/components/messages/project.StatusStarted"
          - $ref: "#/components/messages/project.StatusClosed"
          - $ref: "#/components/messages/project.StatusReopened"
          - $ref: "#/components/messages/project.StatusCancelled"

          - $ref: "#/components/messages/job.Created"
          - $ref: "#/components/messages/job.Archived"
          - $ref: "#/components/messages/job.VendorAssigned"
          - $ref: "#/components/messages/job.VendorUnassigned"
          - $ref: "#/components/messages/job.InfoUpdated"
          - $ref: "#/components/messages/job.StatusOpened"
          - $ref: "#/components/messages/job.StatusStarted"
          - $ref: "#/components/messages/job.StatusClosed"
          - $ref: "#/components/messages/job.StatusReopened"
          - $ref: "#/components/messages/job.StatusCancelled"
          - $ref: "#/components/messages/job.FilesAdded"
          - $ref: "#/components/messages/job.FilesRemoved"

          - $ref: "#/components/messages/user.DeletedOrErased"

components:
  schemas:
    EventEnvelope:
      description: "Envelope shared between messages"
      type: object
      required:
        - eventName
        - eventId
        - timestamp
        - workspaceId
        - event
      properties:
        eventName:
          type: string
        eventId:
          type: string
        timestamp:
          type: string
          format: date-time
        workspaceId:
          type: string
          description: "Identifier of the workspace in the chat"
        workspaceName:
          type: string
          description: "Name of the workspace"
        revision:
          type: number
          description: "Event revision used for Event schema versioning and upcasting. Null means this is the first revision of the event"
        metadata:
          type: object
          description: "Other, client defined data"
        causedBy:
          type: string
          format: UUID
        event:
          type: object

    NameWithDictionaryId:
      description: "Object that stores not localized name and id for localizations"
      type: object
      required: [notLocalized]
      properties:
        notLocalized:
          type: string
        dictionaryId:
          description: "Id for localized name"
          type: string

    Project:
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
        number:
          type: string
        urls:
          type: object
          properties:
            clientView:
              type: string
            managerView:
              type: string
        finance:
          type: object
          properties:
            currency:
              type: string
              format: currency-ISO-code
            summary:
              type: object
              required: [totalValue]
              properties:
                totalValue:
                  type: number
                totalCost:
                  type: number
        services:
          type: array
          items:
            type: object
            required: [serviceName, serviceSpecification]
            properties:
              finance:
                type: object
                properties:
                  totalValue:
                    type: number
                  calculationUnit:
                    type: string
                  quantity:
                    type: object
                    properties:
                      totalQuantity:
                        type: number
                      weightedQuantity:
                        type: number
              serviceName:
                $ref: "#/components/schemas/NameWithDictionaryId"
              serviceSpecification:
                type: object
                properties:
                  sourceLanguage:
                    type: string
                    format: lang-ISO-code
                  targetLanguages:
                    type: array
                    items:
                      type: string
                      format: lang-ISO-code
                  specialization:
                    $ref: "#/components/schemas/NameWithDictionaryId"
                  catToolName:
                    type: string
                  mtEngineName:
                    type: string
        dates:
          type: object
          properties:
            plannedStartDate:
              type: string
              format: date-time
            plannedEndDate:
              type: string
              format: date-time
        client:
          type: object
          required: [id, name, number, location]
          properties:
            id:
              type: string
              format: UUID
            name:
              type: string
            number:
              type: string
            location:
              type: object
              properties:
                country:
                  type: string
                city:
                  type: string

    Job:
      type: object
      properties:
        id:
          type: string
          format: UUID
        projectId:
          type: string
          format: UUID
        name:
          type: string
        number:
          type: string
        urls:
          type: object
          properties:
            clientView:
              type: string
            managerView:
              type: string
            vendorView:
              type: string
        finance:
          type: object
          properties:
            currency:
              type: string
              format: currency-ISO-code
            summary:
              type: object
              required: [totalValue]
              properties:
                totalValue:
                  type: number
        services:
          type: array
          items:
            type: object
            required: [serviceName, serviceSpecification]
            properties:
              finance:
                type: object
                properties:
                  totalValue:
                    type: number
                  calculationUnit:
                    type: string
                  quantity:
                    type: object
                    properties:
                      totalQuantity:
                        type: number
                      weigthedQuantity:
                        type: number
              serviceName:
                $ref: "#/components/schemas/NameWithDictionaryId"
              serviceSpecification:
                type: object
                properties:
                  sourceLanguage:
                    type: string
                    format: lang-ISO-code
                  targetLanguages:
                    type: array
                    items:
                      type: string
                      format: lang-ISO-code
                  specialization:
                    $ref: "#/components/schemas/NameWithDictionaryId"
                  catToolName:
                    type: string
                  mtEngineName:
                    type: string
        dates:
          type: object
          properties:
            plannedStartDate:
              type: string
              format: date-time
            plannedEndDate:
              type: string
              format: date-time
        instructions:
          type: object
          properties:
            fromManager:
              type: string
            fromPreviousVendors:
              type: string

  messages:

    project.Created:
      description: |
        * TMS should send it when: Project was created
        * XTRF sends it when: Project or Quote was created
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.created
              event:
                type: object
                required: [project]
                properties:
                  project:
                    required: [id, name, number, urls, services, client]
                    $ref: "#/components/schemas/Project"

    project.Archived:
      description: |
        * TMS should send it when: Project was archived, deactivated, removed or deleted
        * XTRF sends it when: Project was archived or deleted
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.archived
              event:
                type: object
                required: [projectId]
                properties:
                  projectId:
                    type: string
                    format: UUID

    project.ManagerAssigned:
      description: |
        * TMS should send it when: Project Manager was assigned to a Project
        * XTRF sends it when: Project Manager or Project Coordinator was assigned to a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.managerAssigned
              event:
                type: object
                required: [projectId, manager]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  manager:
                    type: object
                    required: [id, name, email]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string

    project.ManagerUnassigned:
      description: |
        * TMS should send it when: Project Manager was unassigned from a Project
        * XTRF sends it when: Project Manager or Project Coordinator was unassigned from a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.managerUnassigned
              event:
                type: object
                required: [projectId, managerId]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  managerId:
                    type: string
                    format: UUID

    project.InfoUpdated:
      description: |
        * TMS should send it when: Project info was updated
        * XTRF sends it when: Project info was updated (excluding information for which there are specific events, for ex. status)
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.info.updated
              event:
                type: object
                required: [project]
                properties:
                  project:
                    description: "Only fields that have changed"
                    required: [id]
                    $ref: "#/components/schemas/Project"

    project.StatusOpened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was opened
        * XTRF sends it when: After Project or Quote was Created
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.opened
              event:
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusStarted:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was started
        * XTRF sends it when: in Project job will be started for the first time or when converting quote to project there will be any started job
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.started
              event:
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusClosed:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was closed
        * XTRF sends it when: Project status was changed to Closed
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.closed
              event:
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusReopened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was reopened
        * XTRF sends it when: Project status was changed to Open or Quote status was changed to Pending
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.reopened
              event:
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusCancelled:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was calceled
        * XTRF sends it when: Project status was changed to Cancelled or Quote status was changed to Rejected
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.cancelled
              event:
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.Created:
      description: |
        * TMS should send it when: Job was created
        * XTRF sends it when: Job was created (in Project or Quote)
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.created
              event:
                type: object
                required: [job]
                properties:
                  job:
                    required: [id, projectId, name, number, urls, services]
                    $ref: "#/components/schemas/Job"

    job.Archived:
      description: |
        * TMS should send it when: Job was archived, deactivated, removed or deleted. Should be sent if the job was archived as a consequence of archiving a project.
        * XTRF sends it when: Job was archived or deleted
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.archived
              event:
                type: object
                required: [jobId, projectId]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID

    job.VendorAssigned:
      description: |
        * TMS should send it when: Vendor was assigned to a Job in a Project
        * XTRF sends it when: Vendor Contact Person was assigned to a Job in a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.vendorAssigned
              event:
                type: object
                required: [jobId, projectId, vendor]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  vendor:
                    type: object
                    required: [id, name, email, location]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string
                      companyName:
                        type: string
                      location:
                        type: object
                        properties:
                          country:
                            type: string
                          city:
                            type: string

    job.VendorUnassigned:
      description: |
        * TMS should send it when: Vendor was unassigned from a Job in a Project
        * XTRF sends it when: Vendor Contact Person was unassigned from a Job in a Project/Quote
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.vendorUnassigned
              event:
                type: object
                required: [jobId, projectId, vendorId]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  vendorId:
                    type: string
                    format: UUID

    job.InfoUpdated:
      description: |
        * TMS should send it when: Job info was updated
        * XTRF sends it when: Job type, number, languages or specializations were updated
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.info.updated
              event:
                type: object
                required: [job]
                properties:
                  job:
                    description: "Only fields that have changed"
                    required: [id, projectId]
                    $ref: "#/components/schemas/Job"

    job.StatusOpened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was opened
        * XTRF sends it when: Job status was changed to Opened, Requested or Assigned
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.opened
              event:
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusStarted:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was started
        * XTRF sends it when: Job status was changed to Started
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.started
              event:
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusClosed:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was closed
        * XTRF sends it when: Job status was changed to Ready
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.closed
              event:
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusReopened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was reopened
        * XTRF sends it when: Job was reopened
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.reopened
              event:
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusCancelled:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was cancelled
        * XTRF sends it when: Job status was changed to Cancelled
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.cancelled
              event:
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.FilesAdded:
      description: |
        * TMS should send it when: A file was added to a Job
        * XTRF sends it when: A file was added to a Job
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.files.added
              event:
                type: object
                required: [jobId, projectId, files]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  files:
                    type: array
                    items:
                      type: object
                      required: [id, name, url, properties]
                      properties:
                        id:
                          type: string
                          format: UUID
                        name:
                          type: string
                        url:
                          type: string
                        properties:
                          type: object
                          properties:
                            category:
                              type: string
                            sourceLanguage:
                              type: string
                              format: lang-ISO-code
                            targetLanguage:
                              type: string
                              format: lang-ISO-code                                  

    job.FilesRemoved:
      description: |
        * TMS should send it when: A file was removed from a Job
        * XTRF sends it when: A file was removed from a Job
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.files.removed
              event:
                type: object
                required: [jobId, projectId, fileIds]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  fileIds:
                    type: array
                    items:
                      type: string
                      format: UUID

    user.DeletedOrErased:
      description: |
        * TMS should send it when: User was deleted, erased or deactivated in the TMS and has to be removed from the Workspace.
        * XTRF sends it when: HP User or Vendor Contact Person was deleted or erased
      payload:
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.user.deletedOrErased
              event:
                type: object
                required: [user]
                properties:
                  user:
                    type: object
                    required: [id]
                    properties:
                      id:
                        type: string
                        format: UUID
