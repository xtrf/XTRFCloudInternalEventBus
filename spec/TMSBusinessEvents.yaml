asyncapi: 2.0.0
info:
  title: Chat 2.0 Events
  version: docs version 1.1.8
defaultContentType: "application/json"
channels:
  tms-events:
    subscribe:
      summary: TMS Events
      message:
        oneOf:
          - $ref: "#/components/messages/project.Created"
          - $ref: "#/components/messages/project.Archived"
          - $ref: "#/components/messages/project.ManagerAssigned"
          - $ref: "#/components/messages/project.ManagerUnassigned"
          - $ref: "#/components/messages/project.InfoUpdated"
          - $ref: "#/components/messages/project.StatusOpened"
          - $ref: "#/components/messages/project.StatusStarted"
          - $ref: "#/components/messages/project.StatusClosed"
          - $ref: "#/components/messages/project.StatusReopened"
          - $ref: "#/components/messages/project.StatusCancelled"

          - $ref: "#/components/messages/job.Created"
          - $ref: "#/components/messages/job.Archived"
          - $ref: "#/components/messages/job.VendorAssigned"
          - $ref: "#/components/messages/job.VendorUnassigned"
          - $ref: "#/components/messages/job.InfoUpdated"
          - $ref: "#/components/messages/job.StatusOpened"
          - $ref: "#/components/messages/job.StatusStarted"
          - $ref: "#/components/messages/job.StatusClosed"
          - $ref: "#/components/messages/job.StatusReopened"
          - $ref: "#/components/messages/job.StatusCancelled"
          - $ref: "#/components/messages/job.FilesAdded"
          - $ref: "#/components/messages/job.FilesRemoved"

          - $ref: "#/components/messages/job.offer.AcceptedEvent"
          - $ref: "#/components/messages/job.offer.RejectedEvent"
          - $ref: "#/components/messages/job.ProspectingRequestedEvent"

          - $ref: "#/components/messages/user.DeletedOrErased"

  job_offers-events:
      subscribe:
        summary: Job Offers app Events
        message:
          oneOf:
            - $ref: "#/components/messages/job.offer.vendorSelectionRequested"
            - $ref: "#/components/messages/job.offer.sentToVendor"
            - $ref: "#/components/messages/job.offer.vendorResponded"

            - $ref: "#/components/messages/prospecting.started"
            - $ref: "#/components/messages/prospecting.finished"
            - $ref: "#/components/messages/prospecting.cancelled"

components:
  schemas:
    EventEnvelope:
      $id: EventEnvelope
      description: "Envelope shared between messages"
      type: object
      required: [eventName, eventId, timestamp, workspaceId, event]
      properties:
        eventName:
          type: string
        eventId:
          type: string
        timestamp:
          type: string
          format: date-time
        workspaceId:
          type: string
          description: "Identifier of the workspace in the chat"
        workspaceName:
          type: string
          description: "Name of the workspace"
        revision:
          type: [number, "null"]
          description: "Event revision used for Event schema versioning and upcasting. Null means this is the first revision of the event"
        metadata:
          #type: any - if there is no type its interpreted by libraries as any
          $id: EventEnvelopeMetadata
          description: "Other, client defined data"
        causedBy:
          type: string
          format: UUID
        event:
          $id: Event
          type: object

    NameWithDictionaryId:
      $id: NameWithDictionaryId
      description: "Object that stores not localized name and id for localizations"
      type: object
      required: [notLocalized]
      properties:
        notLocalized:
          type: string
        dictionaryId:
          description: "Id for localized name"
          type: string

    ProjectUrls:
      type: object
      $id: ProjectUrls
      properties:
        clientView:
          type: string
        managerView:
          type: string

    ProjectFinance:
      type: object
      $id: ProjectFinance
      properties:
        currency:
          type: string
          format: currency-ISO-code
        summary:
          $id: ProjectFinanceSummary
          type: object
          required: [totalValue]
          properties:
            totalValue:
              type: number
            totalCost:
              type: number

    ProjectService:
      $id: ProjectService
      type: object
      required: [serviceName, serviceSpecification]
      properties:
        finance:
          $id: ProjectServiceFinance
          type: object
          properties:
            totalValue:
              type: number
            calculationUnit:
              type: string
            quantity:
              $id: ProjectServiceFinanceQuantity
              type: object
              properties:
                totalQuantity:
                  type: number
                weightedQuantity:
                  type: number
        serviceName:
          $ref: "#/components/schemas/NameWithDictionaryId"
        serviceSpecification:
          $id: ProjectServiceSpecification
          type: object
          properties:
            sourceLanguage:
              type: string
              format: lang-ISO-code
            targetLanguage:
              type: string
              format: lang-ISO-code
            specialization:
              $ref: "#/components/schemas/NameWithDictionaryId"
            catToolName:
              type: string
            mtEngineName:
              type: string

    ProjectDates:
      $id: ProjectDates
      type: object
      properties:
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time

    ProjectClient:
      $id: ProjectClient
      type: object
      required: [id, name, number, location]
      properties:
        id:
          type: string
          format: UUID
          minLength: 0
        name:
          type: string
        number:
          type: string
        location:
          $id: ProjectClientLocation
          type: object
          properties:
            country:
              type: string
            city:
              type: string

    Project:
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
        number:
          type: string
        urls:
          $ref: "#/components/schemas/ProjectUrls"
        sourceLanguages:
          type: array
          items:
            type: string
            format: lang-ISO-code
        targetLanguages:
          type: array
          items:
            type: string
            format: lang-ISO-code
        specializations:
          type: array
          items:
            $ref: "#/components/schemas/NameWithDictionaryId"
        finance:
          $ref: "#/components/schemas/ProjectFinance"
        services:
          type: array
          items:
            $ref: "#/components/schemas/ProjectService"
        dates:
          $ref: "#/components/schemas/ProjectDates"
        client:
          $ref: "#/components/schemas/ProjectClient"

    Job:
      type: object
      properties:
        id:
          type: string
          format: UUID
        projectId:
          type: string
          format: UUID
        name:
          type: string
        number:
          type: string
        urls:
          $id: JobUrls
          type: object
          properties:
            clientView:
              type: string
            managerView:
              type: string
            vendorView:
              type: string
        sourceLanguages:
          type: array
          items:
            type: string
            format: lang-ISO-code
        targetLanguages:
          type: array
          items:
            type: string
            format: lang-ISO-code
        specialization:
          $ref: "#/components/schemas/NameWithDictionaryId"
        finance:
          $id: JobFinance
          type: object
          properties:
            currency:
              type: string
              format: currency-ISO-code
            summary:
              $id: JobFinanceSummary
              type: object
              required: [totalValue]
              properties:
                totalValue:
                  type: number
        services:
          type: array
          items:
            $id: JobService
            type: object
            required: [serviceName, serviceSpecification]
            properties:
              finance:
                $id: JobServiceFinance
                type: object
                properties:
                  totalValue:
                    type: number
                  calculationUnit:
                    type: string
                  quantity:
                    $id: JobServiceFinanceQuantity
                    type: object
                    properties:
                      totalQuantity:
                        type: number
                      weightedQuantity:
                        type: number
              serviceName:
                $ref: "#/components/schemas/NameWithDictionaryId"
              serviceSpecification:
                $id: JobServiceSpecification
                type: object
                properties:
                  sourceLanguage:
                    type: string
                    format: lang-ISO-code
                  targetLanguage:
                    type: string
                    format: lang-ISO-code
                  specialization:
                    $ref: "#/components/schemas/NameWithDictionaryId"
                  catToolName:
                    type: string
                  mtEngineName:
                    type: string
        dates:
          $id: JobDates
          type: object
          properties:
            plannedStartDate:
              type: string
              format: date-time
            plannedEndDate:
              type: string
              format: date-time
        instructions:
          $id: JobInstructions
          type: object
          properties:
            fromManager:
              type: string
            fromPreviousVendors:
              type: string

    JobOfferVendorDetails:
      type: object
      $id: JobOfferVendorDetails
      required: [id]
      properties:
        id:
          type: string
          format: UUID
        additionalData:
          $id: AdditionalData
          type: object
          description: "TMS specific data. Below are fields sent by XTRF."
          properties:
            xtrfVendorId:
              type: number
            xtrfVendorPriceProfileId:
              type: number
            xtrfVendorContactPersonId:
              type: number

    JobOfferVendorResponseType: 
      enum:
        - rejected
        - accepted
        - negotiated

    ProspectingTriggerType: 
      enum:
        - automatic
        - manual
        - tms

    ProspectingSelectionTriggerType: 
      enum:
        - automatic
        - manual

    ProspectingResolutionType: 
      enum:
        - vendorRecommended
        - noRecommendation
        - noProposalsReceived
        - recommendedVendorSelected
        - otherVendorSelected

    ContractProposal:
      $id: ContractProposal
      type: object
      required: [fee, currency, plannedEndDate]
      properties:
        fee:
          type: number
        currency:
          type: string
          format: currency-ISO-code
        plannedEndDate:
          type: string
          format: date-time

  messages:
    project.Created:
      description: |
        * TMS should send it when: Project was created
        * XTRF sends it when: Project or Quote was created
      payload:
        $id: MessageProjectCreated
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.created
              event:
                type: object
                $id: EventProjectCreated
                required: [project]
                properties:
                  project:
                    $id: ProjectCreated
                    required: [id, number, urls, client]
                    $ref: "#/components/schemas/Project"

    project.Archived:
      description: |
        * TMS should send it when: Project was archived, deactivated, removed or deleted
        * XTRF sends it when: Project was archived or deleted
      payload:
        $id: MessageProjectArchived
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.archived
              event:
                $id: EventProjectArchived
                type: object
                required: [projectId]
                properties:
                  projectId:
                    type: string
                    format: UUID

    project.ManagerAssigned:
      description: |
        * TMS should send it when: Project Manager was assigned to a Project
        * XTRF sends it when: Project Manager or Project Coordinator was assigned to a Project/Quote
      payload:
        $id: MessageProjectManagerAssigned
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.managerAssigned
              event:
                type: object
                $id: EventProjectManagerAssigned
                required: [projectId, manager]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  manager:
                    type: object
                    $id: ProjectManager
                    required: [id, name, email]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string

    project.ManagerUnassigned:
      description: |
        * TMS should send it when: Project Manager was unassigned from a Project
        * XTRF sends it when: Project Manager or Project Coordinator was unassigned from a Project/Quote
      payload:
        $id: MessageProjectManagerUnassigned
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.managerUnassigned
              event:
                $id: EventProjectManagerUnassigned
                type: object
                required: [projectId, managerId]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  managerId:
                    type: string
                    format: UUID

    project.InfoUpdated:
      description: |
        * TMS should send it when: Project info was updated
        * XTRF sends it when: Project info was updated (excluding information for which there are specific events, for ex. status)
      payload:
        $id: MessageProjectInfoUpdated
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.info.updated
              event:
                $id: EventProjectInfoUpdated
                type: object
                required: [project]
                properties:
                  project:
                    description: "Only fields that have changed"
                    $id: ProjectInfoUpdated
                    required: [id]
                    $ref: "#/components/schemas/Project"

    project.StatusOpened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was opened
        * XTRF sends it when: After Project or Quote was Created
      payload:
        $id: MessageProjectStatusOpened
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.opened
              event:
                $id: EventProjectStatusOpened
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusStarted:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was started
        * XTRF sends it when: in Project job will be started for the first time or when converting quote to project there will be any started job
      payload:
        $id: MessageProjectStatusStarted
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.started
              event:
                $id: EventProjectStatusStarted
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusClosed:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was closed
        * XTRF sends it when: Project status was changed to Closed
      payload:
        $id: MessageProjectStatusClosed
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.closed
              event:
                $id: EventProjectStatusClosed
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusReopened:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was reopened
        * XTRF sends it when: Project status was changed to Open or Quote status was changed to Pending
      payload:
        $id: MessageProjectStatusReopened
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.reopened
              event:
                $id: EventProjectStatusReopened
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    project.StatusCancelled:
      description: |
        * TMS should send it when: Project status was changed to a status that means the project was calceled
        * XTRF sends it when: Project status was changed to Cancelled or Quote status was changed to Rejected
      payload:
        $id: MessageProjectStatusCancelled
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.project.status.cancelled
              event:
                $id: EventProjectStatusCancelled
                type: object
                required: [projectId, newStatus]
                properties:
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.Created:
      description: |
        * TMS should send it when: Job was created
        * XTRF sends it when: Job was created (in Project or Quote)
      payload:
        $id: MessageJobCreated
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.created
              event:
                $id: EventJobCreated
                type: object
                required: [job]
                properties:
                  job:
                    $id: JobCreated
                    required: [id, projectId, name, number, urls]
                    $ref: "#/components/schemas/Job"

    job.Archived:
      description: |
        * TMS should send it when: Job was archived, deactivated, removed or deleted. Should be sent if the job was archived as a consequence of archiving a project.
        * XTRF sends it when: Job was archived or deleted
      payload:
        $id: MessageJobArchived
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.archived
              event:
                $id: EventJobArchived
                type: object
                required: [jobId, projectId]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID

    job.VendorAssigned:
      description: |
        * TMS should send it when: Vendor was assigned to a Job in a Project
        * XTRF sends it when: Vendor Contact Person was assigned to a Job in a Project/Quote
      payload:
        $id: MessageJobVendorAssigned
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.vendorAssigned
              event:
                $id: EventJobVendorAssigned
                type: object
                required: [jobId, projectId, vendor]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  vendor:
                    type: object
                    $id: Vendor
                    required: [id, name, email, location]
                    properties:
                      id:
                        type: string
                        format: UUID
                      name:
                        type: string
                        description: "Merge of two fields: firstName and lastName"
                      email:
                        type: string
                      companyName:
                        type: string
                      location:
                        $id: JobClientLocation
                        type: object
                        properties:
                          country:
                            type: string
                          city:
                            type: string

    job.VendorUnassigned:
      description: |
        * TMS should send it when: Vendor was unassigned from a Job in a Project
        * XTRF sends it when: Vendor Contact Person was unassigned from a Job in a Project/Quote
      payload:
        $id: MessageJobVendorUnassigned
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.vendorUnassigned
              event:
                type: object
                $id: EventJobVendorUnassigned
                required: [jobId, projectId, vendorId]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  vendorId:
                    type: string
                    format: UUID

    job.InfoUpdated:
      description: |
        * TMS should send it when: Job info was updated
        * XTRF sends it when: Job type, number, languages or specializations were updated
      payload:
        $id: MessageJobInfoUpdated
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.info.updated
              event:
                $id: EventJobInfoUpdated
                type: object
                required: [job]
                properties:
                  job:
                    $id: JobInfoUpdated
                    description: "Only fields that have changed"
                    required: [id, projectId]
                    $ref: "#/components/schemas/Job"

    job.StatusOpened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was opened
        * XTRF sends it when: Job status was changed to Opened, Requested or Assigned
      payload:
        $id: MessageJobStatusOpened
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.opened
              event:
                type: object
                $id: EventJobStatusOpened
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusStarted:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was started
        * XTRF sends it when: Job status was changed to Started
      payload:
        $id: MessageJobStatusStarted
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.started
              event:
                $id: EventJobStatusStarted
                type: object
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusClosed:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was closed
        * XTRF sends it when: Job status was changed to Ready
      payload:
        $id: MessageJobStatusClosed
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.closed
              event:
                type: object
                $id: EventJobStatusClosed
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusReopened:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was reopened
        * XTRF sends it when: Job was reopened
      payload:
        $id: MessageJobStatusReopened
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.reopened
              event:
                type: object
                $id: EventJobStatusReopened
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.StatusCancelled:
      description: |
        * TMS should send it when: Job status was changed to a status that means the job was cancelled
        * XTRF sends it when: Job status was changed to Cancelled
      payload:
        $id: MessageJobStatusCancelled
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.status.cancelled
              event:
                type: object
                $id: EventJobStatusCancelled
                required: [jobId, projectId, newStatus]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  newStatus:
                    type: string
                  previousStatus:
                    type: string
                  occurredAt:
                    type: string
                    format: date-time

    job.FilesAdded:
      description: |
        * TMS should send it when: A file was added to a Job
        * XTRF sends it when: A file was added to a Job
      payload:
        $id: MessageJobFilesAdded
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.files.added
              event:
                type: object
                $id: EventJobFilesAdded
                required: [jobId, projectId, files]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  files:
                    type: array
                    items:
                      type: object
                      $id: File
                      required: [id, name, properties]
                      properties:
                        id:
                          type: string
                          format: UUID
                        name:
                          type: string
                        urls:
                          $id: FileUrl
                          type: object
                          properties:
                            forVendor:
                              type: string
                            forManager:
                              type: string
                        properties:
                          $id: FileProperties
                          type: object
                          properties:
                            category:
                              type: string
                            sourceLanguage:
                              type: string
                              format: lang-ISO-code
                            targetLanguage:
                              type: string
                              format: lang-ISO-code

    job.FilesRemoved:
      description: |
        * TMS should send it when: A file was removed from a Job
        * XTRF sends it when: A file was removed from a Job
      payload:
        $id: MessageJobFilesRemoved
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.files.removed
              event:
                type: object
                $id: EventJobFilesRemoved
                required: [jobId, projectId, fileIds]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  projectId:
                    type: string
                    format: UUID
                  fileIds:
                    type: array
                    items:
                      type: string
                      format: UUID

    job.offer.AcceptedEvent:
      description: |
        * TMS should send it when: Vendor accepted a Job Offer in TMS
        * XTRF sends it when: Vendor accepted a Job Offer in Vendor Portal
      payload:
        $id: MessageAcceptedEvent
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.offer.status.accepted
              event:
                $id: EventJobOfferAccepted
                type: object
                required: [jobId, vendor]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  vendor:
                    $ref: "#/components/schemas/JobOfferVendorDetails"

    job.offer.RejectedEvent:
      description: |
        * TMS should send it when: Vendor rejected a Job Offer in TMS
        * XTRF sends it when: Vendor rejected a Job Offer in Vendor Portal
      payload:
        $id: MessageRejectedEvent
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.offer.status.rejected
              event:
                $id: EventJobOfferRejected
                type: object
                required: [jobId, vendor]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  vendor:
                    $ref: "#/components/schemas/JobOfferVendorDetails"

    job.ProspectingRequestedEvent:
      description: |
        * TMS should send it when: New prospecting should be created 
        * XTRF sends it when: New prospecting should be created
      payload:
        $id: MessageProspectingRequestedEvent
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.job.prospecting.requested
              event:
                $id: EventProspectingRequested
                type: object
                required: [jobId, autostart, workspaceId, projectCurrency, vendors]
                properties:
                  jobId:
                    type: string
                    format: UUID
                  autostart:
                    type: boolean
                  prospectingStrategyId:
                    type: string
                    format: UUID
                  workspaceId:
                    type: string
                    format: UUID
                  projectCurrency:
                    type: string
                    format: currency-ISO-code
                  vendors:
                    type: array
                    items:
                      type: object
                      properties:
                        profile:
                          type: object
                          properties:
                            vendorId:
                              type: string
                              format: UUID
                            metadata:
                              type: object
                              properties:
                                xtrfVendorContactPersonId:
                                  type: number
                                xtrfVendorId:
                                  type: number
                                xtrfVendorPriceProfileId:
                                  type: number
                                xtrfVendorPriceProfileDefault:
                                  type: boolean
                        details:
                          type: object
                          properties:
                            name:
                              type: string
                            legalName:
                              type: string
                            individual:
                              type: boolean
                            inHouse:
                              type: boolean
                            preferredByClient:
                              type: boolean
                            nativeSpeaker:
                              type: boolean
                            country:
                              type: string
                            city:
                              type: string
                        contactPersonDetails:
                          type: object
                          required: [name, email]
                          properties:
                            name:
                              type: string
                            email:
                              type: string
                        evaluation:
                          type: number
                        tools:
                          type: array
                          items:
                            type: string
                        finance:
                          type: object
                          required: [currency]
                          properties:
                            fee:
                              type: number
                            currency:
                              type: string
                              format: currency-ISO-code
                        history:
                          type: object
                          properties:
                            lastJobDate:
                              type: string
                              format: date-time
                            lastJobDateForThisClient:
                              type: string
                              format: date-time
                            workedForThisClient:
                              type: boolean
                        labels:
                          type: array
                          items:
                            type: string
                        additionalProperties:
                          type: object
                          required: [priceProfileName]
                          properties:
                            priceProfileName:
                              type: string
                            customFields:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: array
                                    items:
                                      type: string
                                  type:
                                    type: string

    user.DeletedOrErased:
      description: |
        * TMS should send it when: User was deleted, erased or deactivated in the TMS and has to be removed from the Workspace.
        * XTRF sends it when: HP User or Vendor Contact Person was deleted or erased
      payload:
        $id: MessageUserDeletedOrErased
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: tms.event.user.deletedOrErased
              event:
                $id: EventUserDeletedOrErased
                type: object
                required: [user]
                properties:
                  user:
                    $id: User
                    type: object
                    required: [id]
                    properties:
                      id:
                        type: string
                        format: UUID

    prospecting.started:
      description: |
        * Job offer should send it when: prospecting started.
      payload:
        $id: MessageProspectingStarted
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.prospecting.started
              event:
                $id: EventProspectingStarted
                type: object
                required: [prospectingId, prospectingUrl]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  prospectingUrl:
                    type: string

    prospecting.finished:
      description: |
        * Job offer should send it when: prospecting finished.
      payload:
        $id: MessageProspectingFinished
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.prospecting.finished
              event:
                $id: EventProspectingFinished
                type: object
                required: [prospectingId, trigger, resolution]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  vendorId:
                    type: string
                    format: UUID
                  trigger:
                    $ref: "#/components/schemas/ProspectingTriggerType"
                  resolution:
                    $ref: "#/components/schemas/ProspectingResolutionType"

    prospecting.cancelled:
      description: |
        * Job offer should send it when: prospecting cancelled.
      payload:
        $id: MessageProspectingCancelled
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.prospecting.cancelled
              event:
                $id: EventProspectingCancelled
                type: object
                required: [prospectingId, trigger]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  trigger:
                    $ref: "#/components/schemas/ProspectingTriggerType"

    job.offer.vendorSelectionRequested:
      description: |
        * Job offer should send it when: prospecting wants to assign vendor.
      payload:
        $id: MessageJobOfferVendorSelectionRequested
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.vendorSelectionRequested
              event:
                $id: EventJobOfferVendorSelectionRequested
                type: object
                required: [prospectingId, selectionTrigger, jobId, vendorOffer]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  selectionTrigger:
                    $ref: "#/components/schemas/ProspectingSelectionTriggerType"
                  jobId:
                    type: string
                    format: UUID
                  vendorOffer:
                    $id: VendorOfferSelectionRequested
                    type: object
                    required: [vendor, id, contractProposal]
                    properties:
                      id:
                        type: string
                        format: UUID
                      vendor:
                        $ref: "#/components/schemas/JobOfferVendorDetails"
                      contractProposal:
                        $ref: "#/components/schemas/ContractProposal"

    job.offer.sentToVendor:
      description: |
        * Job offer should send it when: cascade offers are sent.
      payload:
        $id: MessageJobOfferSentToVendor
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.sentToVendor
              event:
                $id: EventJobOfferSentToVendor
                type: object
                required: [prospectingId, jobId, vendorOffer]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  jobId:
                    type: string
                    format: UUID
                  vendorOffer:
                    $id: VendorOfferSentToVendor
                    type: object
                    required: [vendor, id, contractProposal, negotiationsAllowed, offerDeadline]
                    properties:
                      id:
                        type: string
                        format: UUID
                      negotiationsAllowed:
                        type: boolean
                      vendor:
                        $ref: "#/components/schemas/JobOfferVendorDetails"
                      contractProposal:
                        $ref: "#/components/schemas/ContractProposal"
                      chatUrl:
                        type: string
                      offerDeadline:
                        type: string
                        format: date-time

    job.offer.vendorResponded:
      description: |
        * Job offer should send it when: vendor responded to active offer.
      payload:
        $id: MessageJobOfferVendorResponded
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.vendorResponded
              event:
                $id: EventJobOfferVendorResponded
                type: object
                required: [prospectingId, jobId, vendorOffer]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  jobId:
                    type: string
                    format: UUID
                  vendorOffer:
                    $id: VendorOfferVendorResponded
                    type: object
                    required:
                      [vendor, id, response]
                    properties:
                      id:
                        type: string
                        format: UUID
                      vendor:
                        $ref: "#/components/schemas/JobOfferVendorDetails"
                      contractProposal:
                        $ref: "#/components/schemas/ContractProposal"
                      response:
                        $ref: "#/components/schemas/JobOfferVendorResponseType"
    job.offer.expired:
      description: |
        * Job offer should send it when: vendor offer expires and for every offer separately.
      payload:
        $id: MessageJobOfferExpired
        allOf:
          - $ref: "#/components/schemas/EventEnvelope"
          - type: object
            required: [eventName, event]
            properties:
              eventName:
                const: jobOffers.expired
              event:
                $id: EventJobOfferExpired
                type: object
                required: [prospectingId, jobId, vendorOfferId]
                properties:
                  prospectingId:
                    type: string
                    format: UUID
                  jobId:
                    type: string
                    format: UUID
                  vendorOfferId:
                    type: string
                    format: UUID
